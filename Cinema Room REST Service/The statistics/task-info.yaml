type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |
    package cinema.model;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.*;

    @Getter
    @Setter
    @AllArgsConstructor
    @NoArgsConstructor
    @EqualsAndHashCode
    public class Seat {
        int row;
        int column;
        @EqualsAndHashCode.Exclude
        @JsonProperty(access = JsonProperty.Access.READ_ONLY)
        int price;
    }
  learner_created: true
- name: src/cinema/controller/ErrorControllerAdvice.java
  visible: true
  text: |-
    package cinema.controller;

    import cinema.exception.AlreadySoldException;
    import cinema.exception.OutOfBoundsException;
    import cinema.exception.WrongTokenException;
    import cinema.model.ErrorDTO;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.RestControllerAdvice;

    @RestControllerAdvice
    public class ErrorControllerAdvice {

        @ExceptionHandler({
                AlreadySoldException.class,
                OutOfBoundsException.class,
                WrongTokenException.class
        })
        ResponseEntity<ErrorDTO> errorHandler(RuntimeException e) {
            return ResponseEntity.badRequest()
                    .body(new ErrorDTO(e.getMessage()));
        }
    }
  learner_created: true
- name: src/cinema/model/ErrorDTO.java
  visible: true
  text: |
    package cinema.model;

    import lombok.Value;

    @Value
    public class ErrorDTO {
        String error;
    }
  learner_created: true
- name: src/cinema/model/ReturnRequest.java
  visible: true
  text: |
    package cinema.model;

    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.validation.constraints.Pattern;

    @Data
    @NoArgsConstructor
    public class ReturnRequest {
        //@Pattern(regexp = "[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{8}")
        String token;
    }
  learner_created: true
- name: src/cinema/exception/WrongTokenException.java
  visible: true
  text: |
    package cinema.exception;

    public class WrongTokenException extends RuntimeException {
        public WrongTokenException() {
            super("Wrong token!");
        }
    }
  learner_created: true
- name: src/cinema/exception/AlreadySoldException.java
  visible: true
  text: |
    package cinema.exception;

    public class AlreadySoldException extends RuntimeException {
        public AlreadySoldException() {
            super("The ticket has been already purchased!");
        }
    }
  learner_created: true
- name: src/cinema/config/CinemaRoomProperties.java
  visible: true
  text: |
    package cinema.config;

    import lombok.Getter;
    import lombok.Setter;
    import org.springframework.boot.context.properties.ConfigurationProperties;
    import org.springframework.context.annotation.PropertySource;
    import org.springframework.stereotype.Component;

    @Getter
    @Setter
    @Component
    @ConfigurationProperties(prefix = "cinema-room")
    @PropertySource("classpath:cinema.properties")
    public class CinemaRoomProperties {
        int totalRows;
        int totalColumns;
        int firstRows;
        int firstRowsPrice;
        int lastRowsPrice;
    }
  learner_created: true
- name: src/cinema/model/CinemaRoom.java
  visible: true
  text: |
    package cinema.model;

    import lombok.Getter;
    import lombok.Setter;

    import java.util.List;

    @Getter
    @Setter
    public class CinemaRoom {
        int totalRows;
        int totalColumns;
        List<Seat> availableSeats;
    }
  learner_created: true
- name: src/cinema/exception/OutOfBoundsException.java
  visible: true
  text: |
    package cinema.exception;

    public class OutOfBoundsException extends RuntimeException {
        public OutOfBoundsException() {
            super("The number of a row or a column is out of bounds!");
        }
    }
  learner_created: true
- name: src/cinema/service/CinemaRoomService.java
  visible: true
  text: |
    package cinema.service;

    import cinema.model.CinemaRoom;
    import cinema.model.Seat;
    import cinema.model.SoldTicketResponse;

    public interface CinemaRoomService {

        CinemaRoom getAvailableSeats();

        SoldTicketResponse purchase(Seat seat);

        Seat returnTicket(String token);
    }
  learner_created: true
- name: src/cinema/service/CinemaRoomServiceImpl.java
  visible: true
  text: |
    package cinema.service;

    import cinema.config.CinemaRoomProperties;
    import cinema.exception.AlreadySoldException;
    import cinema.exception.OutOfBoundsException;
    import cinema.exception.WrongTokenException;
    import cinema.model.CinemaRoom;
    import cinema.model.Seat;
    import cinema.model.SoldTicketResponse;
    import cinema.repository.CinemaRoomRepository;
    import cinema.repository.SoldTicketsRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import java.util.UUID;

    @Service
    public class CinemaRoomServiceImpl implements CinemaRoomService {
        @Autowired
        CinemaRoomRepository cinemaRoomRepository;
        @Autowired
        SoldTicketsRepository soldTicketsRepository;
        @Autowired
        CinemaRoomProperties cinemaRoomProperties;

        @Override
        public CinemaRoom getAvailableSeats() {
            var res = new CinemaRoom();
            res.setTotalRows(cinemaRoomProperties.getTotalRows());
            res.setTotalColumns(cinemaRoomProperties.getTotalColumns());
            var seats = cinemaRoomRepository.getAvailableSeats();
            seats.forEach(this::setPrice);
            res.setAvailableSeats(cinemaRoomRepository.getAvailableSeats());

            return res;
        }

        private int calcPrice(Seat seat) {
            return seat.getRow() <= cinemaRoomProperties.getFirstRows()
                    ? cinemaRoomProperties.getFirstRowsPrice()
                    : cinemaRoomProperties.getLastRowsPrice();
        }

        private void setPrice(Seat seat) {
            seat.setPrice(calcPrice(seat));
        }

        @Override
        public SoldTicketResponse purchase(Seat seat) {
            if (!(1 <= seat.getRow() && seat.getRow() <= cinemaRoomProperties.getTotalRows()
                    && 1 <= seat.getColumn() && seat.getColumn() <= cinemaRoomProperties.getTotalColumns())) {
                throw new OutOfBoundsException();
            }
            if (!cinemaRoomRepository.delete(seat)) {
                throw new AlreadySoldException();
            }
            setPrice(seat);
            String token = UUID.randomUUID().toString();
            var res = new SoldTicketResponse(token, seat);
            soldTicketsRepository.save(token, seat);
            return res;
        }

        @Override
        public Seat returnTicket(String token) {
            return soldTicketsRepository.findByToken(token)
                    .orElseThrow(WrongTokenException::new);
        }
    }
  learner_created: true
- name: src/cinema/controller/CinemaRoomController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.model.CinemaRoom;
    import cinema.model.ReturnRequest;
    import cinema.model.Seat;
    import cinema.model.SoldTicketResponse;
    import cinema.service.CinemaRoomService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import javax.validation.Valid;
    import java.util.Map;

    @RestController
    public class CinemaRoomController {
        @Autowired
        CinemaRoomService cinemaRoomService;

        @GetMapping("/seats")
        CinemaRoom getAvailableSeats() {
            return cinemaRoomService.getAvailableSeats();
        }

        @PostMapping("/purchase")
        SoldTicketResponse purchase(@RequestBody Seat seat) {
            return cinemaRoomService.purchase(seat);
        }

        @PostMapping("/return")
        Map<String, Object> returnTicket(@RequestBody ReturnRequest returnRequest) {
            Seat seat = cinemaRoomService.returnTicket(returnRequest.getToken());
            return Map.of("returned_ticket", seat);
        }
    }
  learner_created: true
- name: src/cinema/repository/CinemaRoomRepository.java
  visible: true
  text: |
    package cinema.repository;

    import cinema.config.CinemaRoomProperties;
    import cinema.model.Seat;
    import lombok.Getter;
    import lombok.Setter;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Repository;

    import javax.annotation.PostConstruct;
    import java.util.ArrayList;
    import java.util.List;

    @Getter
    @Setter
    @Repository
    public class CinemaRoomRepository {
        @Autowired
        CinemaRoomProperties cinemaRoomProperties;
        List<Seat> availableSeats;

        @PostConstruct
        void initAvailableSeats() {
            availableSeats = new ArrayList<>();
            for (int i = 1; i <= cinemaRoomProperties.getTotalRows(); i++) {
                for (int j = 1; j <= cinemaRoomProperties.getTotalColumns(); j++) {
                    availableSeats.add(new Seat(i, j, 0));
                }
            }
        }

        public boolean delete(Seat seat) {
            return availableSeats.remove(seat);
        }
    }
  learner_created: true
- name: src/resources/cinema.properties
  visible: true
  text: |-
    cinema-room.total-rows=9
    cinema-room.total-columns=9
    cinema-room.first-rows=4
    cinema-room.first-rows-price=10
    cinema-room.last-rows-price=8
  learner_created: true
- name: src/cinema/repository/SoldTicketsRepository.java
  visible: true
  text: |
    package cinema.repository;

    import cinema.model.Seat;
    import org.springframework.stereotype.Repository;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.Optional;

    @Repository
    public class SoldTicketsRepository {
        Map<String, Seat> soldTickets = new HashMap<>();

        public void save(String token, Seat seat) {
            soldTickets.put(token, seat);
        }

        public Optional<Seat> findByToken(String token) {
            return Optional.ofNullable(soldTickets.remove(token));
        }
    }
  learner_created: true
- name: src/cinema/model/SoldTicketResponse.java
  visible: true
  text: |
    package cinema.model;

    import lombok.Value;

    @Value
    public class SoldTicketResponse {
        String token;
        Seat ticket;
    }
  learner_created: true
- name: src/cinema/model/StatsResponse.java
  visible: true
  learner_created: true
- name: src/cinema/exception/WrongPasswordException.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/948/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 23 Sep 2022 07:31:27 UTC
record: -1
